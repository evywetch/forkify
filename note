=> User Story = Description of the application's functionality from the user perspective.
=> Common format for user story = As a [type of user], I want [an action] so that [a benefit] Ex. As a user, i want to search for recipes so that i can find new ideas for meals.

                                User Story For This App
1. As a user, i want to search for recipes so that i can find new ideas for meals.
    => Search functionality: input field to send request to API with serched keywords.
    => Display results with pagination.
    => Display recipe with cooking time, servings and ingredients.
2. As a user, i want to be able to update the number of servings, so that i can cook a meal for different number of people.
    => Change serving functionality: Update all ingredients according to current number of servings.
3. As a user, i want to bookmark recipes, so that i can review them later.
    => Bookmarking functionality: display list of all bookmarked recipes.
4. As a user, i want to be able to create my own recipes, so that i have them all organized in the same app.
    => User can upload his own recipes.
    => User recipeswill automatically be bookmarked.
    => User can only see his own recipes, not recipes from the others.
5. As a user, i want to be able to see my bookmarks and own recipes when i leave the app and come back later, so that i can close the app safely after cooking
    => Store bookmark data in the browser using local storage.
    => On page load, read saved bookmarks from local storage and display.


                                Achitecture 
This project we are going to use:
- MVC (Model View Controller)
- MVP (Model View Presenter)
- Flux

Components of any architecture:
- Business Logic:
    => Code that solves the actual business problem.
    => Direct related to what business does and what it needs.
    => Example: sending message, storing transaction, calculating taxes, etc.
- State: (Frontend)
    => Essentially stores all the data about the application. Data about application's frontend.
    => Should store any data that u might fetch from API or data that the user inputs or what page the user currently viewing, etc. Should be the single source of truth.
    => UI should be kept in sync with the state. Means that if some data changes in the state, then the user interface should reflect that. Or if something changes in the UI then the state should also change.
    => State libraries exist like Redux or MobX.
- HTTP Library:
    => Responsible for making and recieving AJAX requests(using fetch function).
    => Optional but almost always necessary in real-world apps.
- Application logic (Router)
    => Code that is only concerned about the implementation of application itself. Ex. Handeling of UI events(click, load, etc) and navigation on the page. Mapping actions to the user navigations
    => Handles navigation and UI events
- Presentation Logic (UI Layer)
    => Code that is concerned about the visible part of the application.
    => Essentially display application state

MVC (Model View Controller)
=> View:for Presentation logic, part of application interacting with the users.
=> Model: is all about application's data. Usually contain the State, Business logic that mulnipulate the state. It also contains the HTTP Library that might get some data from the web(API or backend)
=> Controller: contains Application's logic. It sits between model and view
                               


                                    Tool installation before start coding
1. Install NPM => npm init => then get package.json
2. Set up the "scripts" in package.json
3. Install Parcel => npm i parcel@next -D (parcel@next = choose the latest version)
4. Start Parcel by running our npm scripts "npm run start". After running this coomand, u will get error coz it's trying to Install SASS. Quit it with control + c
5. run " npm install" it will then install SASS for us. If u still get the error with SASS here, just try to install SASS using the exact same vversion number Ex. "npm install sass@1.32.8"
6. Then run "npm run start" again. Now we have a node_module and dist folder.
7. Install Polyfills for ES6 features to our code base by running "npm i core-js regenerator-runtime"  And make sure to import them at the top of the .js file
8. In package.json, we also created a 'build' command, it's used to build the final project files with compression and tree schaking and all of that, before we then deploy to a server
NOTE:
**** To run a command, has to run in "bash" NOT "node"
**** If u get error, u can quit it using control + c
**** In Parcel, we can import more then just JS files, we can import all kinds of assets, that includes images.

                                    Libraries that used in this project
1. Fractional Library
    => Google search: npm fractional
    => install it with npm using command " npm install fractional "
    => If it is installed, will appear in package.json
    => can import it in the .js file u want " import fractional from 'fractional'; "
    => This library export "Fraction" function constructor which has a fraction function locate inside it.

                                   APIs that used in this project
1. Forkify API
2. Local storage API from browser (model.js)
3. History API from browser (controller.controlAddRecipe())
=>  window.history.pushState();
=> History API gives a history object
=> pushState() == allows us to change the URL without having to reloading the page
=> pushState() == takes 3 arguments; 1) called a state 2) title 3) URL
=> NOTE: we can use History API to go back and forward just as we do click back and forward in the browser, ex. window.history.back()



                    Event Handlers in MVC: Publisher-Subscriber Pattern
=> We use this pattern coz we want to handle the events in the controller(controllRecipes function) coz otherwise, we would have application logic in the view, we don;t want that. On the other hand, we want to listen for events in the view(Event listeners), coz otherwise we would need DOM elements in the controller, this means we would have presentation logic in the controller, which would be wrong in our MVC implementation, DOM should be in the view. So event listeners should be attached to DOM elements in the view, but the events(callback function) should then be handled by controller functions that live in the controller module.
=> We have a publisher which is some code which knows when to react. In this case is going to be addHandlerRender function coz it will contain the addEventListener method. Therefore it will know when to react to the event.
=> Subscriber is a code that wants to react. This is the code that should be executed when the event happens(the callback). In this case that is the controllRecipe function(in controller.js)
=> But Remember that the publisher(addHandlerRender) does not know yet that the subscriber(controllRecipe) even exists coz the subscriber is in the controller that the view can't access. The solution is: we can now subscribe to the publisher by passing into subscriber function as an argument. That means that as soon as the program loads, the init function is called which in turn immediately calls the addHandlerRender function from the view. So this will allow us to keep the handler(controllRecipe) in the controller and the listener in the view(addEventListener)

                            
                                Method / Techniques using in this app

=> Math.ciel() == round up number
=> e.target.closest() == Event delegation == Mostly used to find the element that is clicked, closest() will find the closest PARENT of the clicked element. Ex. e.target.closest('.btn--inline') = find the closest '.btn--inline' element (paginationView.js)
=> Custom data attribute => We can use data attribute to store data ex. id, page number for later use. Ex. data-goto. And get the data from the attribute by using dataset, ex. btn.dataset.goto (paginationView.js)
=> NOTE: In JS this._data.servings - 1 ==  this._data.servings -= 1 ;  
=> NOTE: Different between calling a normal functions that don't belong to any object or class VS calling a methods that belong to any object or class  ==> normalFunction() VS this.classMethod
=> Array.from() convert node list into an array
=> NOTE: isEqualNode() is used to compare if 2 nodes(DOM elements) have SAME CONTENT
=> NOTE: HAVE TO check out the defference between element and node
=> NOTE: window.location.hash  == how to get the hash(the hash is the # + id) from the URL
=> Array.some() == array method that returns true or false (Model.loadRecipe)
=> Array.findIndex() == array method that used to find the index of the specified id
=> NOTE: Array.splice(index, amount of elements that want to delete) == array mthod, used for deleting element with the specific index(model.deleteBookmark)
=> NOTE: FormData = an object from browser API, use it to collect all the data in the form, so we don't have to write to code to get data from the form line by lice for each element in the form. (addRecipeView -> addHandlerUpload())
=> NOTE: Object.fromEntries(arrayObj) == covert array to object
Ex. [Array(2), Array(2)] == [['prop1', 1], ['prop2', 2]] ==> {prop1: 1, prop2: 2}
=> NOTE: Object.entries(obj) == covert object to array 
Ex. {prop1: 1, prop2: 2}  ==> [Array(2), Array(2)] == [['prop1', 1], ['prop2', 2]]
=> NOTE: Array.filter() == returns an aaray only the entries that we filtered in
=> NOTE: When we call an async function, have to use AWAIT keyword. Then we will a promise object from it; either resolve or reject promise, otherwise we won't get anything from that async function. Await keyword can only be used in async function!!
=> NOTE: && operator short-circiut
=> NOTE: use unsplash.com  to get food picture's url.
=> NOTE: Learn how to do code documentation, go to jsdoc.app
=> Arrow functions
=> Destructuring
=> Async/ Await, promise
=> AJAX



                            Improvements for this app
1. Display number of pages between the pagination buttons.
2. Ability to SORT seach results by duration or number of ingredients.
3. Perform ingredients validation in view, before submitting the form.
4. Improve recipe ingredient input: separate in multiple fields and allow more than 6 ingredients.
5. Shopping list feature: button on recipe to add ingredients to a list.
6. Weekly meal planning feature: assign recipes to the next 7 days and show on a weekly calendar.
7. Get nutrition data on each ingredient from spoonacular API (https://spoonacular.com/food-api) and calculte total calories of recipe.